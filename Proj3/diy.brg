%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "y.tab.h"
#include "postfix.h"

extern FILE *outfp;
extern void yyerror(const char*);
char *dupstr(const char *s);

int checkType(int type);
int lbl;
char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_i%d", n);
  return strcpy(malloc(strlen(buf)+1),buf);
}
static char *mkfunc(char *s) {
  static char buf[80];
  strcpy(buf, "_");
  strcat(buf, s);
  return buf;
}
static void outstr(char *s) {
  while (*s) fprintf(outfp, pfCHAR, (unsigned char)*s++);
  fprintf(outfp, pfCHAR, 0);
}


static char *extrns[100]; /* emit externs at the end only */
static int extcnt;

static long conts[30], contcnt; /* emit continues */

static long brklbl[20], brkcnt; /* break labels */

int checkIntRight(Node* n)    { return (RIGHT_CHILD(n)->info != 3) ? 1: MAX_COST;}
int checkDoubleRight(Node* n) { return (RIGHT_CHILD(n)->info == 3 ) ? 1: MAX_COST;}
int checkIntAlloc(Node* n)    { return (RIGHT_CHILD(n)->info != 13) ? 1: MAX_COST;}
int checkDoubleAlloc(Node* n) { return (RIGHT_CHILD(n)->info == 13 ) ? 1: MAX_COST;}
int checkIntLV(Node *n)       { return (n->info != 3) ? 1 : MAX_COST; }
int checkDoubleLV(Node *n)    { return (n->info == 3) ? 1 : MAX_COST; }


%}
%include "y.tab.h"
%term FUNC='(' ARGS=',' BLOCK='{' END=';' 
%term ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' EQ='=' LT='<' GT='>' AND='&' OR='|' INDEX='[' ALLOC='#'
%%

finit: FUNC(bloco)

bloco: BLOCK(list)

list: END(list, base)
list: base

base: expr                    1 { if(p->info != 4) fprintf(outfp, pfTRASH, pfWORD); }
base: rexpr                   1 { if(p->info != 4) fprintf(outfp, pfTRASH, pfWORD*2); }


base: bloco 
base: BREAK                   1 { fprintf(outfp, pfJMP, mklbl(brklbl[brkcnt - p->value.i])); }
base: CONTINUE                1 { fprintf(outfp, pfJMP, mklbl(conts[contcnt - p->value.i]));}

rexpr: expr                   1 { fprintf(outfp, pfI2D); }

%! base in if-else/do-while can include break, add after

%! if-else
cond: expr                    1 { p->place = ++lbl; fprintf(outfp, pfJZ, mklbl(p->place)); }
base: IF(cond, base)          1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }

base: ELSE(if, base)          1 { fprintf(outfp, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
if: IF(cond, base)            1 { p->place = ++lbl; fprintf(outfp, pfJMP pfLABEL, mklbl(p->place), mklbl(LEFT_CHILD(p)->place)); }

%! do-while

base: WHILE(do, expr)         1 { brkcnt--; contcnt--; fprintf(outfp, pfJNZ pfLABEL, mklbl(LEFT_CHILD(LEFT_CHILD(p))->place), mklbl(brklbl[brkcnt])); }

do: DO(start, base)           1 { fprintf(outfp, pfLABEL, mklbl(conts[contcnt-1])); }        

start: START                  1 { p->place = ++lbl; fprintf(outfp, pfLABEL, mklbl(p->place)); brklbl[brkcnt++] = ++lbl; conts[contcnt++] = ++lbl; }     

%! for 

base: END(expr, FOR(in, END(baseFor, expr))) 1 { brkcnt--; contcnt--; fprintf(outfp, pfJMP pfLABEL, mklbl(LEFT_CHILD( LEFT_CHILD( RIGHT_CHILD(p) ) )->place), mklbl(LEFT_CHILD( RIGHT_CHILD(p) )->place)); }

baseFor: base                 1 { fprintf(outfp, pfLABEL, mklbl(conts[contcnt-1])); }
in: IN(startFor, expr)        1 { p->place = ++lbl; brklbl[brkcnt++] = p->place; conts[contcnt++] = ++lbl; fprintf(outfp, pfJZ, mklbl(p->place));}

startFor: START               1 { p->place = ++lbl; fprintf(outfp, pfLABEL, mklbl(p->place)); }

%! Allocations

base: ALLOC(alloc,lv)         checkIntAlloc { fprintf(outfp, pfSTORE); }
alloc:  expr                  1 { fprintf(outfp, pfIMM pfMUL pfALLOC pfSP, pfWORD); }

base: ALLOC(ralloc,lv)         checkDoubleAlloc { fprintf(outfp, pfSTORE); }
ralloc:  expr                  1 { fprintf(outfp, pfIMM pfMUL pfALLOC pfSP, pfWORD*2); }

%! expressions

%! Pointers and IDs
expr: PTR(lv)                 checkIntLV { fprintf(outfp, pfLOAD); }      
expr: PTR(PTR(lv))            checkIntLV { fprintf(outfp, pfLOAD pfLOAD); }     

rexpr: PTR(lv)                checkDoubleLV { fprintf(outfp, pfLOAD2); }
rexpr: PTR(PTR(lv))           checkDoubleLV { fprintf(outfp, pfLOAD2 pfLOAD2); }     

%! values
expr: INT                     1 { fprintf(outfp, pfIMM, p->value.i);}
expr: STR                     1 { lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl)); outstr(p->value.s); fprintf(outfp, pfTEXT pfADDR, mklbl(lbl));}
rexpr: REAL                   1 { lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL pfDOUBLE pfTEXT pfADDR pfLOAD2, mklbl(lbl), p->value.r, mklbl(lbl)); }

%! Atrib
expr: ATR(assign, lv)         checkIntRight { fprintf(outfp, pfSTORE); }
assign: expr                  1 { fprintf(outfp, pfDUP); }
rexpr: ATR(rassign, lv)       checkDoubleRight { fprintf(outfp, pfSTORE2); } 
rassign: rexpr                1 { fprintf(outfp, pfDUP2); }

%! negations
expr: UMINUS(expr)            1 { fprintf(outfp, pfNEG); } 
rexpr: UMINUS(rexpr)          1 { fprintf(outfp, pfDNEG); }
expr: NOT(expr)               2 { fprintf(outfp, pfIMM pfEQ, 0); }

%! reference

expr: REF(lv)                 

%! factorial

%! increment and decrement
expr: INCR(lv)                3 { fprintf(outfp, pfDUP pfINCR pfLOAD, 1); }
expr: DECR(lv)                3 { fprintf(outfp, pfDUP pfDECR pfLOAD, 1); }
expr: POSINC(lv)              4 { fprintf(outfp, pfDUP pfLOAD pfSWAP pfINCR, 1); }
expr: POSDEC(lv)              4 { fprintf(outfp, pfDUP pfLOAD pfSWAP pfDECR, 1); }

%! operations
expr: ADD(expr,expr)          1 { fprintf(outfp, pfADD); }
expr: SUB(expr,expr)          1 { fprintf(outfp, pfSUB); }
expr: MUL(expr,expr)          1 { fprintf(outfp, pfMUL); }
expr: DIV(expr,expr)          1 { fprintf(outfp, pfDIV); }
expr: MOD(expr,expr)          1 { fprintf(outfp, pfMOD); }

%! real operations
rexpr: ADD(rexpr,rexpr)          1 { fprintf(outfp, pfDADD); }
rexpr: SUB(rexpr,rexpr)          1 { fprintf(outfp, pfDSUB); }
rexpr: MUL(rexpr,rexpr)          1 { fprintf(outfp, pfDMUL); }
rexpr: DIV(rexpr,rexpr)          1 { fprintf(outfp, pfDDIV); }

%! Comparisons
expr: LT(expr,expr)           1 { fprintf(outfp, pfLT); }
expr: GT(expr,expr)           1 { fprintf(outfp, pfGT); }
expr: GE(expr,expr)           1 { fprintf(outfp, pfGE); }
expr: LE(expr,expr)           1 { fprintf(outfp, pfLE); }
expr: NE(expr,expr)           1 { fprintf(outfp, pfNE); }
expr: EQ(expr,expr)           1 { fprintf(outfp, pfEQ); }

rexpr: LT(rexpr,rexpr)           1 { fprintf(outfp, pfDCMP pfIMM pfLT, 0); }
rexpr: GT(rexpr,rexpr)           1 { fprintf(outfp, pfDCMP pfIMM pfGT, 0); }
rexpr: GE(rexpr,rexpr)           1 { fprintf(outfp, pfDCMP pfIMM pfGE, 0); }
rexpr: LE(rexpr,rexpr)           1 { fprintf(outfp, pfDCMP pfIMM pfLE, 0); }
rexpr: NE(rexpr,rexpr)           1 { fprintf(outfp, pfDCMP pfIMM pfNE, 0); }
rexpr: EQ(rexpr,rexpr)           1 { fprintf(outfp, pfDCMP pfIMM pfEQ, 0); }

%! And Or
expr: AND(and,expr)           2 { fprintf(outfp, pfIMM pfGT pfLABEL, 0, mklbl(LEFT_CHILD(p)->place)); }
and:  expr                    3 { p->place = ++lbl; fprintf(outfp, pfDUP pfJZ pfTRASH, mklbl(p->place), pfWORD); }
expr: OR(or,expr)             2 { fprintf(outfp, pfLABEL pfIMM pfGT, mklbl(LEFT_CHILD(p)->place), 0); }
or: expr                      3 { p->place = ++lbl; fprintf(outfp, pfDUP pfJNZ pfTRASH, mklbl(p->place), pfWORD); }

%! Function calls
expr: CALL(ID, args)          3 { fprintf(outfp, pfCALL pfTRASH, mkfunc(LEFT_CHILD(p)->value.s), (int)(pfWORD*(RIGHT_CHILD(p)->place)));
                                 if(p->info % 5 != 4){ fprintf(outfp, pfPUSH);} }

expr: CALL(ID, VOID)          2 { fprintf(outfp, pfCALL, mkfunc(LEFT_CHILD(p)->value.s));
                                  if(p->info % 5 != 4){ fprintf(outfp, pfPUSH);} }  

%! left values
lv: ID                        1 { fprintf(outfp, pfADDR, p->value.s); }
lv: LOCAL                     1 { fprintf(outfp, pfLOCAL, p->value.i); }
lv: INDEX(lvec, expr)         3 { fprintf(outfp, pfIMM pfMUL pfADD, pfWORD*(p->info == 1 ? 1 : 2)); }

lvec: lv                      1 {  fprintf(outfp, pfLOAD); }

args: ARGS(expr, args)        0 { p->place = (checkType(LEFT_CHILD(p)->info)) + (RIGHT_CHILD(p)->place); }
args: ARGS(expr, NIL)         0 { p->place = (checkType(LEFT_CHILD(p)->info));}
args: ARGS(rexpr, args)       0 { p->place = (checkType(LEFT_CHILD(p)->info)) + (RIGHT_CHILD(p)->place); }
args: ARGS(rexpr, NIL)        0 { p->place = (checkType(LEFT_CHILD(p)->info));}

%%
//expr: ATR(expr, LOCAL)        1 { fprintf(outfp, pfDUP pfLOCA, RIGHT_CHILD(p)->value.i * (pfWORD/4)); }



int checkType(int type){
  if(type / 10 != 0 && type == 3){
      return 2;
  }
  return 1;
}
void externs()
{
  int i;
  
  for (i = 0; i < extcnt; i++)
    if (extrns[i])
      fprintf(outfp, pfEXTRN, extrns[i]);
}

void variable(char *name, Node *type, Node *init, int public, int constant)
{
  int i = 0, siz = type->info;
  if(public){
    fprintf(outfp, pfGLOBL, name, pfOBJ);
  }
  if(!init){
    fprintf(outfp, pfBSS);
  }
  else{
    if(constant){
    fprintf(outfp, pfRODATA);
  }
    else{
      fprintf(outfp, pfDATA);
    }
  }

  fprintf(outfp, pfALIGN pfLABEL, name);

  if (init) {
  	switch (init->attrib) {
      case INT:   fprintf(outfp, pfINTEGER, init->value.i);  break;
	    case ID:    fprintf(outfp, pfID, init->value.s);       break;
      case REAL:  fprintf(outfp, pfDOUBLE, init->value.r);   break;
      case STR: { char *l = mklbl(++lbl);
                  fprintf(outfp, pfID, l);
                  fprintf(outfp, pfDATA);
			            fprintf(outfp, pfALIGN pfLABEL, l);
			            outstr(init->value.s);
			            break; 
                }
      case CONST: { char *l = mklbl(++lbl);
                    fprintf(outfp, pfID, l);
                    fprintf(outfp, pfRODATA);
                    fprintf(outfp, pfALIGN pfLABEL, l);
                    outstr(init->value.s);
                   break; 
                  }
    }
  }

  else{ fprintf(outfp, pfBYTE, pfWORD * siz); }
  
  for (i = 0; i < extcnt; i++)
    if (extrns[i] && strcmp(extrns[i], name) == 0) extrns[i] = 0;

}

void defFunction(char *name, int enter, Node *base, Node *type)
{
  int i;
  extern int errors, trace;
  extern char **yynames;
  if (errors) return;
  if (trace) printNode(base, 0, yynames);
  fflush(stdout);
  fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, mkfunc(name), pfFUNC, mkfunc(name), enter * (pfWORD/4));
  yyselect(base);
  if(type->value.i != 4){
    fprintf(outfp, pfLOCAL pfLOAD pfPOP, -type->info);
    if(type->info == 4){ fprintf(outfp, pfLOCAL pfLOAD pfPOP, -type->info); }
    else { fprintf(outfp, pfLOCAL pfLOAD pfDPOP, -type->info); }
  }
  fprintf(outfp, pfLEAVE pfRET); // just in case ... 
  freeNode(base);

  
  for (i = 0; i < extcnt; i++)
    if (extrns[i] && strcmp(extrns[i], mkfunc(name)) == 0) extrns[i] = 0;
  
}

void extrnFunction(char *name){
  extrns[extcnt++] = dupstr(mkfunc(name));
}

void externVariable(char *name){
  extrns[extcnt++] = dupstr(name);
}