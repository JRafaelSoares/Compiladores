%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "y.tab.h"
#include "postfix.h"

extern FILE *outfp;
char *dupstr(const char *s);

static char *extrns[100]; /* emit externs at the end only */
static int extcnt;

int lbl;
char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_i%d", n);
  return strcpy(malloc(strlen(buf)+1),buf);
}
static char *mkfunc(char *s) {
  static char buf[80];
  strcpy(buf, "_");
  strcat(buf, s);
  return buf;
}
static void outstr(char *s) {
  while (*s) fprintf(outfp, pfCHAR, (unsigned char)*s++);
  fprintf(outfp, pfCHAR, 0);
}

static char *extrns[100]; /* emit externs at the end only */
static int extcnt;

%}
%include "y.tab.h"
%term FUNC='(' ARGS=',' BLOCK='{' END=';'
%%

finit: FUNC(bloco)

bloco: BLOCK(list)

list: END(list, base)
list: base

base: expr

expr: CALL(ID, args)          1 { fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s), (int)(pfWORD*(RIGHT_CHILD(p)->place))); }

expr: ATR(expr, lv)           1 { fprintf(outfp, pfSTORE); }
expr: ATR(expr, LOCAL)        1 { fprintf(outfp, pfDUP pfLOCA, RIGHT_CHILD(p)->value.i * (pfWORD/4)); }

expr: INT                     1 { fprintf(outfp, pfIMM, p->value.i); }
expr: STR                     1 { lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl)); outstr(p->value.s); fprintf(outfp, pfTEXT pfADDR, mklbl(lbl)); }


lv: ID 

args: ARGS(args, expr)      
args: ARGS(NIL, expr)         
%%

void externs()
{
  int i;
  
  for (i = 0; i < extcnt; i++)
    if (extrns[i])
      fprintf(outfp, pfEXTRN, extrns[i]);
}

void variable(char *name, Node *type, Node *init)
{
  int i = 0, siz = 1;
  fprintf(outfp, pfGLOBL pfDATA pfALIGN pfLABEL, name, pfOBJ, name);

  switch(type->CHILD(i)->attrib){
  	case INTEGER: fprintf(outfp, pfIMM pfALLOC, pfWORD); break;
  	case STRING: fprintf(outfp, pfIMM pfALLOC, pfWORD); break;
  	case NUMBER: fprintf(outfp, pfIMM pfALLOC, pfWORD); break;
  }

  if (init) {
  	switch (init->CHILD(i)->attrib) {
      case INT:   fprintf(outfp, pfINTEGER, init->CHILD(i)->value.i); break;
	    case ID:    fprintf(outfp, pfID, init->CHILD(i)->value.s); break;
      case REAL:  fprintf(outfp, pfDOUBLE, init->CHILD(i)->value.r); break;
      case STR: { char *l = mklbl(++lbl);
			            fprintf(outfp, pfRODATA pfALIGN pfLABEL, l);
			            outstr(init->CHILD(i)->value.s);
			            fprintf(outfp, pfDATA pfID, l); break; 
                }
    }
  }
  /*
  for (i = 0; i < extcnt; i++)
    if (extrns[i] && strcmp(extrns[i], name) == 0) extrns[i] = 0;
    */
}

void defFunction(char *name, int enter, Node *stmt)
{
  int i;
  extern int errors, trace;
  extern char **yynames;
  if (errors) return;
  if (trace) printNode(stmt, 0, yynames);
  fflush(stdout);
  fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, mkfunc(name), pfFUNC, mkfunc(name), enter * (pfWORD/4));
  yyselect(stmt);
  fprintf(outfp, pfLEAVE pfRET); // just in case ... 
  freeNode(stmt);

  
  for (i = 0; i < extcnt; i++)
    if (extrns[i] && strcmp(extrns[i], mkfunc(name)) == 0) extrns[i] = 0;
  
}

void extrnFunction(char *name){
  extrns[extcnt++] = dupstr(mkfunc(name));
}

void externVariable(char *name){
  extrns[extcnt++] = dupstr(name);
}