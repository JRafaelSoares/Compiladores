public void prints(string s)
	
	file: file public VOID ID { enter($2, 4, $4); } finit { function($2, intNode(VOID, 4), $4, $6); }
		finit: '(' params ')' blocop { $$ = binNode('(', $4, $2); }
			params	: param
				param	: tipo ID 	{ $$ = binNode(PARAM, $1, strNode(ID, $2));
                                  	IDnew($1->value.i, $2, 0);
                                  	if (IDlevel() == 1) fpar[++fpar[0]] = $1->value.i;
                                	}                	
			blocop  : ';'   { $$ = 0; }
			

public integer entry (integer argc, string *argv, string *envp) {
  prints("olÃ¡ pessoal!\n")
  entry := 0
};

file: file public VOID ID { enter($2, 4, $4); } finit { function($2, intNode(VOID, 4), $4, $6); }
		finit: '(' params ')' blocop { $$ = binNode('(', $4, $2); }
			params: params ',' param      { $$ = binNode(',', $1, $3); }
				params: params ',' param      { $$ = binNode(',', $1, $3); }
					params	: param
						param	: tipo ID 	{ $$ = binNode(PARAM, $1, strNode(ID, $2));
                                  	IDnew($1->value.i, $2, 0);
                                  	if (IDlevel() == 1) fpar[++fpar[0]] = $1->value.i;
                                	}  
        blocop: bloco ';'   { $$ = $1; }
			bloco	: '{' { IDpush(); } decls list end '}'    { $$ = binNode('{', $5 ? binNode(';', $4, $5) : $4, $3); IDpop(); }
				list: list base     { $$ = binNode(';', $1, $2); }
					list: base
						base: expr ';'              { $$ = $1; }
							expr: ID '(' args ')' { $$ = binNode(CALL, strNode(ID, $1), $3); $$->info = checkargs($1, $3); }
								args: expr
									expr: STR
					base: expr ';'              { $$ = $1; }
						expr: lv ATR expr   { $$ = binNode(ATR, $3, $1); if ($$->info % 10 > 5) yyerror("constant value to assignment"); if (noassign($1, $3)) yyerror("illegal assignment"); $$->info = $1->info; }
							lv		: ID		{ 	long pos; int typ = IDfind($1, &pos);
                      								if (pos == 0) $$ = strNode(ID, $1);
                      								else $$ = intNode(LOCAL, pos);
			  		  								$$->info = typ;
												}
							expr	: INT           { $$ = intNode(INT, $1); $$->info = 1; }

